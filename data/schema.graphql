input LoginMutationInput {
  username: String!
  password: String!
  clientMutationId: String!
}

type LoginMutationPayload {
  access_token: String
  viewer: Viewer
  clientMutationId: String!
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer
}

type User implements Node {
  id: ID!
  name: String
  siblings(after: String, first: Int, before: String, last: Int): UserConnection
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type Viewer {
  id: ID!
  name: String
  user: User
}
